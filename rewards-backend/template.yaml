AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for rewards-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    Environment:
      Variables:
        MAX_REWARDS_PAGE_SIZE: 100

Resources:
  RewardRepositoryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: RewardRepositoryLayer
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: RewardRepositoryLayer
      ContentUri: src/RewardRepository
      CompatibleRuntimes:
        - dotnet8
  SharedValidatorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedValidatorLayer
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: SharedValidatorLayer
      ContentUri: src/SharedValidator
      CompatibleRuntimes:
        - dotnet8
  TokenValidatorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: TokenValidatorLayer
      Description: !Sub
        - Stack ${AWS::StackName} Layer ${ResourceName}
        - ResourceName: TokenValidatorLayer
      ContentUri: src/TokenValidator
      CompatibleRuntimes:
        - dotnet8
  RewardsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod # Define the Stage Name once
      Cors:
        # AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,Cookie'"
        AllowOrigin: "'http://localhost:8000'"
        AllowCredentials: true #required to use credentials in requests
      Auth:
        Authorizers:
          JwtAuthorizer: # Logical ID of the Authorizer
            FunctionArn: !GetAtt JwtAuthorizerFunction.Arn
            IdentitySource: method.request.header.Cookie
            AuthorizerResultTtlInSeconds: 300
            Type: REQUEST
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
  JwtAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: JwtAuthorizer
      Handler: JwtAuthorizer::JwtAuthorizer.Function::AuthorizerHandler
      CodeUri: src/JwtAuthorizer/
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Layers:
        - !Ref SharedValidatorLayer
        - !Ref TokenValidatorLayer
  AuthMeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthMe
      Handler: Auth::Auth.Auth::MeHandler
      CodeUri: src/Auth/
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /auth/me
            Method: get
            Auth:
              Unauthorize: {}
      Layers:
        - !Ref TokenValidatorLayer
  AuthLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthLogout
      Handler: Auth::Auth.Auth::LogoutHandler
      CodeUri: src/Auth/
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /auth/logout
            Method: post
            Auth:
              Unauthorize: {}
              # Authorizer: JwtAuthorizer
      Layers:
        - !Ref TokenValidatorLayer
  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/Login/
      Handler: Login::Login.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /login
            Method: post
            Auth:
              Unauthorize: {}
      Layers:
        - !Ref SharedValidatorLayer
  RewardCreatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/RewardCreator/
      Handler: RewardCreator::RewardCreator.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        CreateReward:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /reward
            Method: post
            Auth:
              Authorizer: JwtAuthorizer
      Layers:
        - !Ref SharedValidatorLayer
        - !Ref RewardRepositoryLayer
  RewardUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/RewardUpdater/
      Handler: RewardUpdater::RewardUpdater.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        UpdateReward:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /reward
            Method: put
            Auth:
              Authorizer: JwtAuthorizer
      Layers:
        - !Ref SharedValidatorLayer
        - !Ref RewardRepositoryLayer
  RewardDeleterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/RewardDeleter/
      Handler: RewardDeleter::RewardDeleter.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        UpdateReward:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            Path: /reward/{id}
            Method: delete
            Auth:
              Authorizer: JwtAuthorizer
      Layers:
        - !Ref SharedValidatorLayer
        - !Ref RewardRepositoryLayer
  RewardsReaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/RewardsReader/
      Handler: RewardsReader::RewardsReader.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      MemorySize: 512
      Events:
        GetRewards:
          Type: Api
          Properties:
            RestApiId: !Ref RewardsApi
            # /rewards?page=1&pageSize=5&name=Peanut&category=Food - Condiment&price=asc
            Path: /rewards
            Method: get
            RequestParameters:
              - method.request.querystring.name:
                  Required: false
              - method.request.querystring.category:
                  Required: false
              - method.request.querystring.price:
                  Required: false
              - method.request.querystring.page:
                  Required: false
              - method.request.querystring.pageSize:
                  Required: false
            Auth:
              Unauthorize: {}
              #Authorizer: JwtAuthorizer
      Layers:
        - !Ref SharedValidatorLayer
        - !Ref RewardRepositoryLayer

Outputs:
  RewardsApiEndpoint: # Renamed for clarity
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://!{RewardsApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"
